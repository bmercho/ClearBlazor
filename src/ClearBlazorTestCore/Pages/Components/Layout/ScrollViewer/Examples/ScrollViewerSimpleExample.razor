@namespace ClearBlazorTest
@using Microsoft.JSInterop
@implements IObserver<bool>

<StackPanel Orientation=Orientation.Portrait Spacing=20>
    <StackPanel Orientation=Orientation.Landscape>
        <Grid BorderThickness=1 Width=500 Height=500>
            <ScrollViewer @ref=_scrollViewer
                          VerticalScrollMode=@_verticalScrollMode
                          HorizontalScrollMode=@_horizontalScrollMode
                          ScrollbarGutter=@_scrollbarGutter
                          VerticalOverscrollBehaviour=@_verticalOverscrollBehaviour
                          HorizontalOverscrollBehaviour=@_horizontalOverscrollBehaviour>
                @if (_verticalOverflowText)
                {
                    if (_horizontalOverflowText)
                    {
                        <Grid Rows="Auto" Columns="50,*">

                        @for (int i = 1; i <= 200; i++)
                        {
                            int row = i;
                                <Grid Row=@i Column=1>
                            <TextBlock  TextWrapping=TextWrap.NoWrap TextTrimming=false>
                                @($"Line{row} Lorem ipsum dolor, sit amet consectetur adipisicing elit.Dolorem ab, magnam quaerat praesentium delectus iure, consequuntur commodi exercitationem asperiores ad deleniti iste rem eius.Saepe consequatur consequuntur ")
                            </TextBlock>

                                </Grid>
                            }
                        </Grid>

                    }
                    else
                    {
                        @for (int i = 1; i <= 200; i++)
                        {
                            int row = i;
                            <TextBlock>@($"Line{row}")</TextBlock>
                        }
                    }
                }
                else
                {
                    if (_horizontalOverflowText)
                    {
                        @for (int i = 1; i <= 6; i++)
                        {
                            int row = i;
                            <TextBlock TextWrapping=TextWrap.NoWrap TextTrimming=false>
                                @($"Line{row} Lorem ipsum dolor, sit amet consectetur adipisicing elit.Dolorem ab, magnam quaerat praesentium delectus iure, consequuntur commodi exercitationem asperiores ad deleniti iste rem eius.Saepe consequatur consequuntur ")
                            </TextBlock>
                        }
                    }
                    else
                    {
                        @for (int i = 1; i <= 6; i++)
                        {
                            int row = i;
                            <TextBlock>@($"Line{row}")</TextBlock>
                        }
                    }
                }
            </ScrollViewer>
        </Grid>
        @if (BrowserSizeService.DeviceSize >= DeviceSize.Medium)
        {
            <StackPanel Column=1 Margin=30 Spacing=5>
                <RadioGroup Label="Vertical Scroll mode" @bind-Value=_verticalScrollMode
                            @bind-Value:after=@Changed>
                    @foreach (ScrollMode mode in Enum.GetValues(typeof(ScrollMode)))
                    {
                        <Radio Label=@mode.ToString() Value="@mode" />
                    }
                </RadioGroup>
                <RadioGroup Label="Horizontal Scroll mode" @bind-Value=_horizontalScrollMode
                            @bind-Value:after=@Changed>
                    @foreach (ScrollMode mode in Enum.GetValues(typeof(ScrollMode)))
                    {
                        <Radio Label=@mode.ToString() Value="@mode" />
                    }
                </RadioGroup>
                <RadioGroup Label="Scrollbar gutter" @bind-Value=_scrollbarGutter
                            @bind-Value:after=@Changed>
                    @foreach (ScrollbarGutter mode in Enum.GetValues(typeof(ScrollbarGutter)))
                    {
                        <Radio Label=@mode.ToString() Value="@mode" />
                    }
                </RadioGroup>
                <RadioGroup Label="Vertical overscroll behaviour"
                            @bind-Value=_verticalOverscrollBehaviour
                            @bind-Value:after=@Changed>
                    @foreach (OverscrollBehaviour mode in Enum.GetValues(typeof(OverscrollBehaviour)))
                    {
                        <Radio Label=@mode.ToString() Value="@mode" />
                    }
                </RadioGroup>
                <RadioGroup Label="Horizontal overscroll behaviour"
                            @bind-Value=_horizontalOverscrollBehaviour
                            @bind-Value:after=@Changed>
                    @foreach (OverscrollBehaviour mode in Enum.GetValues(typeof(OverscrollBehaviour)))
                    {
                        <Radio Label=@mode.ToString() Value="@mode" />
                    }
                </RadioGroup>
                <CheckBox @bind-Checked=_verticalOverflowText
                          @bind-Checked:after=@Changed
                          Label="Vertical overflow text" />
                <CheckBox @bind-Checked=_horizontalOverflowText
                          @bind-Checked:after=@Changed
                          Label="Horizontal overflow text" />
            </StackPanel>
        }
    </StackPanel>
    <WrapPanel Row=1 ColumnSpan=3 ColumnSpacing=10 RowSpacing=10 Direction=Direction.Row>
        <Button OnClicked=@(e => GotoTop(100))> Goto top 100</Button>
        <Button OnClicked=@(e => GotoTop(50))> Goto top 50</Button>
        <Button OnClicked=@(e => GotoLeft(100))> Goto left 100</Button>
        <Button OnClicked=@(e => GotoLeft(50))> Goto left 50</Button>
    </WrapPanel>
</StackPanel>

@code {
    private ScrollViewer _scrollViewer = null!;
    private ScrollMode _verticalScrollMode = ScrollMode.Auto;
    private ScrollMode _horizontalScrollMode = ScrollMode.Auto;
    private ScrollbarGutter _scrollbarGutter = ScrollbarGutter.OnlyWhenOverflowed;
    private OverscrollBehaviour _verticalOverscrollBehaviour = OverscrollBehaviour.None;
    private OverscrollBehaviour _horizontalOverscrollBehaviour = OverscrollBehaviour.None;
    private bool _verticalOverflowText = true;
    private bool _horizontalOverflowText = true;
    private IDisposable ScrollViewUnsubscriber = null!;

    [Inject]
    IJSRuntime JSRuntime { get; set; } = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ScrollViewerWithScrollBars.Subscribe(this);
    }

    public virtual void OnNext(bool hasScrolled)
    {
        //Console.WriteLine("HasScrolled");
    }

    public virtual void Subscribe(IObservable<bool> provider)
    {
        ScrollViewUnsubscriber = provider.Subscribe(this);
    }

    public virtual void OnCompleted()
    {
    }
    public virtual void OnError(Exception error)
    {
    }

    public void Dispose()
    {
        ScrollViewUnsubscriber?.Dispose();
    }

    private void Changed()
    {
        StateHasChanged();
    }

    async Task GotoTop(int top)
    {
        await JSRuntime.InvokeVoidAsync("window.scrollbar.SetScrollTop", _scrollViewer.Id, top);
    }

    async Task GotoLeft(int left)
    {
        await JSRuntime.InvokeVoidAsync("window.scrollbar.SetScrollLeft", _scrollViewer.Id, left);
    }

}


