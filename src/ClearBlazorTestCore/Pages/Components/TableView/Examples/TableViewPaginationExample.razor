@page "/TableViewPaginationExample"
@namespace ClearBlazorTest
@using Data;

<StackPanel Orientation=Orientation.Portrait>
    <TextBlock HorizontalAlignment=Alignment.Start Typo=Typo.H4>Table View</TextBlock>
    <TextBlock HorizontalAlignment=Alignment.Start>VirtualizationMode:Pagination : (5000 rows)</TextBlock>
    <Grid Columns="800,auto,*" Rows="600,*">
        <TableView @ref=_table TItem=TestListRow CornerRadius=4 BorderThickness=1 Margin=10 Padding=10
                   RowSpacing=20 ColumnSpacing=10
                   @bind-SelectedItem=_selectedItem
                   @bind-SelectedItems=_selectedItems
                   SelectionMode=@_selectionMode
                   AllowSelectionToggle=@_allowSelectionToggle
                   HorizontalGridLines=GridLines.All
                   VerticalGridLines=GridLines.All
                   HoverHighlight=@_hoverHighlight
                   OverscrollBehaviour=OverscrollBehaviour.None
                   VirtualizeMode=VirtualizeMode.Pagination
                   PageSize=25
                   ShowHeader=true
                   StickyHeader=true
                   InitialIndex=@((20, Alignment.Center))
                   Items=@_localListData>
            <TableColumn Label="First Name" TItem=TestListRow Field=@(x =>x.FirstName) />
            <TableColumn Label="Last Name" TItem=TestListRow Field=@(x =>x.LastName) />
            <TableColumn Label="Product" TItem=TestListRow Field=@(x =>x.Product) />
            <TableColumn Label="Available" TItem=TestListRow Field=@(x =>x.Available) />
            <TableColumn Label="Quantity" HorizontalContentAlignment=Alignment.Center TItem=TestListRow Field=@(x =>x.Quantity) />
            <TableColumn Label="UnitPrice" HorizontalContentAlignment=Alignment.Stretch TItem=TestListRow Field=@(x =>x.UnitPrice)>
                <DataTemplate Context=item>
                    <TextBlock TextAlignment=Alignment.Start>$@(item.UnitPrice.ToString("0.00"))</TextBlock>
                </DataTemplate>
            </TableColumn>
            <TableColumn Label="Notes" TItem=TestListRow Field=@(x =>x.Notes)>
                <DataTemplate Context=item>
                    <TextBlock TextWrapping=TextWrap.NoWrap TextTrimming=true>@(item.Notes)</TextBlock>
                </DataTemplate>
            </TableColumn>
        </TableView>
        <StackPanel Column=1>
            <RadioGroup Margin=20 Label="Selection mode" @bind-Value=_selectionMode
                        @bind-Value:after=@SelectionModeChangedAsync>
                @foreach (SelectionMode mode in Enum.GetValues(typeof(SelectionMode)))
                {
                    <Radio Label=@mode.ToString() Value="@mode" />
                }
            </RadioGroup>
            <CheckBox Margin=20 @bind-Checked=_allowSelectionToggle Label="Allow selection toggle (single selection only)" />
            <CheckBox Margin=20 @bind-Checked=_hoverHighlight Label="Highlight on hover" />
            <TextBlock Margin=20>Selection=@_selectedItem?.FirstName</TextBlock>
            <TextBlock Margin=20>Selections=@string.Join(",", _selectedItems.Select(s => s.FirstName))</TextBlock>
            <Button Margin=10 Width=150 HorizontalAlignment=Alignment.Start OnClicked=@ClearSelections>Clear selections</Button>
        </StackPanel>
        <WrapPanel Row=1 ColumnSpan=3 ColumnSpacing=10 RowSpacing=10 Direction=Direction.Row Margin=10>
            <StackPanel Orientation=Orientation.Landscape>
                <TextBlock>Page @(_table.CurrentPageNum()) of @(_table.NumPages())</TextBlock>
            </StackPanel>
            <Button OnClicked=@OnNextPageAsync>Next Page</Button>
            <Button OnClicked=@OnPrevPageAsync>Prev Page</Button>
            <Button OnClicked=@OnGotoStartAsync>Goto Start</Button>
            <Button OnClicked=@OnGotoEndAsync>Goto End</Button>
        </WrapPanel>
        <WrapPanel Row=2 ColumnSpan=3 ColumnSpacing=10 RowSpacing=10 Direction=Direction.Row Margin=10>
            <Button OnClicked=@(e => GotoIndexAsync(50, Alignment.Center))>Goto 50</Button>
            <Button OnClicked=@OnAddNewItemAsync>Add new item</Button>
            <Button OnClicked=@OnAddNewItemGotoEndIfAtEndAsync>Add new item and goto end if at end</Button>
            <Button OnClicked=@ChangeItem>Change first item</Button>
            <StackPanel Orientation=Orientation.Landscape>
                <Button OnClicked=@CheckAtEndAsync>CheckAtEnd</Button>
                <TextBlock Margin="0,5,0,5" VerticalAlignment=Alignment.Center>@_atEnd</TextBlock>
            </StackPanel>
            <StackPanel Orientation=Orientation.Landscape>
                <Button OnClicked=@CheckAtStartAsync>CheckAtStart</Button>
                <TextBlock Margin="0,5,0,5" VerticalAlignment=Alignment.Center>@_atStart</TextBlock>
            </StackPanel>
        </WrapPanel>
    </Grid>
</StackPanel>

@code {
    private TableView<TestListRow> _table = null!;
    private TestListRow? _selectedItem = null;
    private List<TestListRow> _selectedItems = new();
    private SelectionMode _selectionMode = SelectionMode.None;
    private bool _allowSelectionToggle = false;
    private bool _hoverHighlight = true;
    private bool _atEnd = false;
    private bool _atStart = true;

    List<TestListRow> _localListData = ClientData.LocalTestListRows5000;

    async Task GotoIndexAsync(int row, Alignment alignment)
    {
        if (_table == null)
            return;
        await _table.GotoIndex(row, alignment);
    }
    async Task OnAddNewItemAsync()
    {
        var count = _localListData.Count;
        _localListData.Add(TestListRow.GetNewTestListRow(count));
        await _table.Refresh();
    }
    async Task OnAddNewItemGotoEndIfAtEndAsync()
    {
        var atEnd = await _table.AtEnd();
        var count = _localListData.Count;
        _localListData.Add(TestListRow.GetNewTestListRow(count));
        await _table.Refresh();
        if (atEnd)
            await _table.GotoEnd();
    }

    void ChangeItem()
    {
        _localListData[0].FirstName = "Bla bla bla";
        _table.Refresh(_localListData[0]);
    }

    async Task OnGotoEndAsync()
    {
        await _table.GotoEnd();
        StateHasChanged();
    }

    async Task OnGotoStartAsync()
    {
        await _table.GotoStart();
        StateHasChanged();
    }

    async Task OnNextPageAsync()
    {
        await _table.NextPage();
        StateHasChanged();
    }

    async Task OnPrevPageAsync()
    {
        await _table.PrevPage();
        StateHasChanged();
    }

    async Task CheckAtEndAsync()
    {
        _atEnd = await _table.AtEnd();
        StateHasChanged();
    }
    async Task CheckAtStartAsync()
    {
        _atStart = await _table.AtStart();
        StateHasChanged();
    }
    private async Task SelectionModeChangedAsync()
    {
        if (_table == null)
            return;
        await _table.RemoveAllSelections();
        StateHasChanged();
    }
    private async Task ClearSelections()
    {
        await _table.RemoveAllSelections();
        StateHasChanged();
    }

}