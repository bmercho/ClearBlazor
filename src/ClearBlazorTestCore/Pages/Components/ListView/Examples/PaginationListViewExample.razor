@namespace ClearBlazorTest
@using Data
<Grid Columns="400,auto" Rows="600,auto,auto">
    <ListView @ref=_list CornerRadius=4 BorderThickness=1 Margin=10 Padding=10
    @bind-SelectedItem=_selectedItem
    @bind-SelectedItems=_selectedItems
    SelectionMode=@_selectionMode
    AllowSelectionToggle=@_allowSelectionToggle
    HoverHighlight=@_hoverHighlight OverscrollBehaviour=OverscrollBehaviour.None
    VirtualizeMode=VirtualizeMode.Pagination
    PageSize=6 Items=@_testData>
        <RowTemplate Context=row>
            <Grid Columns="auto,*" Rows="auto,auto" Margin=10 Padding=10 CornerRadius=8 BorderThickness=1>
                <MaterialIcon Icon=@row.IconName VerticalAlignment=Alignment.Center />
                <TextBlock Column=1 Typo=Typo.H6 TextWrapping=TextWrap.Wrap Margin="0,0,10,10">
                    @($"{row.ToString()} ({row.ItemIndex})")
                </TextBlock>
                <TextBlock Column=1 Row=1 TextWrapping=TextWrap.NoWrap TextTrimming=true Margin="0,0,0,10">
                    @row.Notes
                </TextBlock>
            </Grid>
        </RowTemplate>
    </ListView>
    <Pagination HorizontalAlignment=Alignment.Center Row=1 Color=Color.Primary 
    ShowFirstAndLastButtons=true
    SelectedPage=@_selectedPage 
    NumPages=(int)Math.Ceiling(_testData.Count/6.0)
    NumPagesShown=4
    SelectedPageChanged=@PageChanged />
    <TextBlock HorizontalAlignment=Alignment.Center Row=2 Margin=10 >Page @(_list?.CurrentPageNum()) of @(_list?.NumPages())</TextBlock>

    @if (BrowserSizeService.DeviceSize >= DeviceSize.Small)
    {
        <StackPanel Column=1>
            <RadioGroup Margin=20 Label="Selection mode" @bind-Value=_selectionMode
            @bind-Value:after=@SelectionModeChanged>
                @foreach (SelectionMode mode in Enum.GetValues(typeof(SelectionMode)))
                {
                    <Radio Label=@mode.ToString() Value="@mode" />
                }
            </RadioGroup>
            <CheckBox Margin=20 @bind-Checked=_allowSelectionToggle Label="Allow selection toggle (single selection only)" />
            <CheckBox Margin=20 @bind-Checked=_hoverHighlight Label="Highlight on hover" />
            <TextBlock Margin=20>Selection=@_selectedItem?.ToString()</TextBlock>
            <TextBlock Margin=20>Selections=@string.Join(",", _selectedItems.Select(s => s.ToString()))</TextBlock>
            <Button Margin=10 Width=150 HorizontalAlignment=Alignment.Start OnClicked=@ClearSelections>Clear selections</Button>
        </StackPanel>
    }
</Grid>

@code {
    List<TestListRow> _testData = ClientData.LocalTestListRows5000;

    private TestListRow _selectedItem = null!;
    private List<TestListRow> _selectedItems = new();
    private SelectionMode _selectionMode = SelectionMode.None;
    private bool _allowSelectionToggle = false;
    private bool _hoverHighlight = true;
    private ListView<TestListRow>? _list;
    private bool _atEnd = false;
    private bool _atStart = true;
    private int _selectedPage = 3;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_list == null)
            return;

        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
            await _list.GotoPage(_selectedPage);
    }

    async Task PageChanged(int page)
    {
        if (_list == null)
            return;

        await _list.GotoPage(page);
        _selectedPage = page;
    }

    void ChangeItem()
    {
        if (_list == null)
            return;
        _testData[0].FirstName = "Bla bla bla";
        _list.Refresh(_testData[0]);
    }
    private async Task SelectionModeChanged()
    {
        if (_list == null)
            return;
        await _list.RemoveAllSelections();
        StateHasChanged();
    }

    private async Task ClearSelections()
    {
        if (_list == null)
            return;
        await _list.RemoveAllSelections();
        StateHasChanged();
    }
}