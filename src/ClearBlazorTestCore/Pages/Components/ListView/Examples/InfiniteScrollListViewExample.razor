@namespace ClearBlazorTest
@using Data
<Grid Columns="auto,auto,*" Rows="auto,*">
    <ListView1 @ref=_list Items=@_localListData Column=0 HorizontalAlignment=Alignment.Start Margin=40
              @bind-SelectedItem=_selectedItem @bind-SelectedItems=_selectedItems
              VirtualizeMode=VirtualizeMode.InfiniteScroll
              Width=300 Height=500 BorderThickness="1"
              BorderColor=Color.Dark CornerRadius="4" SelectionMode=@_selectionMode
              HoverHighlight=@_hoverHighlight ShowLoadingSpinner=true
              OverscrollBehaviour=OverscrollBehaviour.None
              AllowSelectionToggle=@_allowSelectionToggle>
        <RowTemplate Context=row>
            <Grid BackgroundColor=Color.BackgroundGrey BorderThickness=1 CornerRadius=8
                  Margin=10 Padding=10 Columns="*,3*" Rows="*,auto" HorizontalAlignment=Alignment.Stretch>
                <MaterialIcon Icon=@row.IconName VerticalAlignment=Alignment.Center />
                <TextBlock VerticalAlignment=Alignment.Center Column=1>@($"{row.ToString()} ({row.ItemIndex})")</TextBlock>
                <TextBlock VerticalAlignment=Alignment.Center Column=1 Row=1> @(row.Notes)</TextBlock>
            </Grid>
        </RowTemplate>
    </ListView1>
    @if (BrowserSizeService.DeviceSize >= DeviceSize.Small)
    {
        <StackPanel Column=1>
            <RadioGroup Margin=20 Label="Selection mode" @bind-Value=_selectionMode
                        @bind-Value:after=@SelectionModeChanged>
                @foreach (SelectionMode mode in Enum.GetValues(typeof(SelectionMode)))
                {
                    <Radio Label=@mode.ToString() Value="@mode" />
                }
            </RadioGroup>
            <CheckBox Margin=20 @bind-Checked=_allowSelectionToggle Label="Allow selection toggle (single selection only)" />
            <CheckBox Margin=20 @bind-Checked=_hoverHighlight Label="Highlight on hover" />
            <TextBlock Margin=20>Selection=@_selectedItem?.ToString()</TextBlock>
            <TextBlock Margin=20>Selections=@string.Join(",", _selectedItems.Select(s => s.ToString()))</TextBlock>
            <Button Margin=10 Width=150 HorizontalAlignment=Alignment.Start OnClicked=@ClearSelections>Clear selections</Button>
        </StackPanel>
        <WrapPanel Row=1 ColumnSpan=3 ColumnSpacing=10 RowSpacing=10 Direction=Direction.Row>
            <Button Row=1 ColumnSpan=3 HorizontalAlignment=Alignment.Start OnClicked=@OnGotoStart>Goto Start</Button>
        </WrapPanel>
    }
</Grid>

@code {
    List<TestListRow> _localListData = ClientData.LocalTestListRows5000;

    private TestListRow _selectedItem = null!;
    private List<TestListRow> _selectedItems = new();
    private SelectionMode _selectionMode = SelectionMode.None;
    private bool _allowSelectionToggle = false;
    private bool _hoverHighlight = true;
    private ListView1<TestListRow>? _list = null;
    private bool _atEnd = false;
    private bool _atStart = true;

    private async Task OnGotoStart()
    {
        if (_list == null)
            return;
        await _list.GotoStart();
    }

    private async Task SelectionModeChanged()
    {
        if (_list == null)
            return;
        await _list.RemoveAllSelections();

        StateHasChanged();
    }

    private async Task ClearSelections()
    {
        await _list.RemoveAllSelections();
        StateHasChanged();
    }

}