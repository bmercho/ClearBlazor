@using Data;
@namespace ClearBlazorTest

<StackPanel Orientation=Orientation.Portrait>
    <TextBlock HorizontalAlignment=Alignment.Start Typo=Typo.H4>List View</TextBlock>
    <TextBlock HorizontalAlignment=Alignment.Start>VirtualizationMode:InfiniteScroll : local data (500 rows)</TextBlock>
    <Grid Columns="800,auto,*" Rows="542,*">
        <ListView @ref=_list TItem=TestListRow CornerRadius=4 BorderThickness=1 Margin=10 Padding=10
                  VirtualizeMode=VirtualizeMode.InfiniteScrollReverse
                  Items=@_localListData
                  @bind-SelectedItem=_selectedItem
                  @bind-SelectedItems=_selectedItems
                  HoverHighlight=@_hoverHighlight
                  AllowSelectionToggle=@_allowSelectionToggle
                  SelectionMode=@_selectionMode
                  PageSize=10
                  ShowLoadingSpinner=false>
            <RowTemplate Context=row>
                <Grid Columns="auto,*" Margin=20 Padding=10 CornerRadius=8 BorderThickness=1>
                    <MaterialIcon Icon=@row.IconName Margin=0,5,0,0 />
                    <StackPanel Column=1 Orientation=Orientation.Portrait>
                        <TextBlock Typo=Typo.H6 TextWrapping=TextWrap.Wrap Margin="0,0,10,10">
                            @(row.ToString() + $"({row.ItemIndex})")
                        </TextBlock>
                        <TextBlock Column=1 TextWrapping=TextWrap.Wrap Margin="0,0,0,10">
                            @row.Notes
                        </TextBlock>
                    </StackPanel>
                </Grid>
            </RowTemplate>
        </ListView>

        @if (BrowserSizeService.DeviceSize >= DeviceSize.Small)
        {
            <StackPanel Column=1>
                <RadioGroup Margin=20 Label="Selection mode" @bind-Value=_selectionMode
                            @bind-Value:after=@SelectionModeChanged>
                    @foreach (SelectionMode mode in Enum.GetValues(typeof(SelectionMode)))
                    {
                        <Radio Label=@mode.ToString() Value="@mode" />
                    }
                </RadioGroup>
                <CheckBox Margin=20 @bind-Checked=_allowSelectionToggle Label="Allow selection toggle (single selection only)" />
                <CheckBox Margin=20 @bind-Checked=_hoverHighlight Label="Highlight on hover" />
                <TextBlock Margin=20>Selection=@_selectedItem?.ToString()</TextBlock>
                <TextBlock Margin=20>Selections=@string.Join(",", _selectedItems.Select(s => s.ToString()))</TextBlock>
                <Button Margin=10 Width=150 HorizontalAlignment=Alignment.Start OnClicked=@ClearSelections>Clear selections</Button>
            </StackPanel>
            <WrapPanel Row=1 ColumnSpan=3 ColumnSpacing=10 RowSpacing=10 Direction=Direction.Row>
                <Button Row=1 ColumnSpan=3 HorizontalAlignment=Alignment.Start OnClicked=@OnGotoStart>Goto Start</Button>
                <Button OnClicked=@OnAddNewItem>Add new item</Button>
                <Button OnClicked=@OnAddNewItemGotoStartIfAtStart>Add new item and goto start if at start</Button>
                <Button OnClicked=@ChangeItem>Change first item</Button>
                <StackPanel Orientation=Orientation.Landscape>
                    <Button OnClicked=@CheckAtStart>CheckAtStart</Button>
                    <TextBlock Margin="0,5,0,5" VerticalAlignment=Alignment.Center>@_atStart</TextBlock>
                </StackPanel>
            </WrapPanel>
        }
    </Grid>
</StackPanel>


@code {
    private TestListRow? _selectedItem = null;
    private List<TestListRow> _selectedItems = new();
    private SelectionMode _selectionMode = SelectionMode.None;
    private bool _allowSelectionToggle = false;
    private bool _hoverHighlight = true;
    private ListView<TestListRow> _list = null!;
    private bool _atEnd = false;
    private bool _atStart = true;

    List<TestListRow> _localListData = ClientData.LocalTestListRows5000;

    async Task CheckAtStart()
    {
        if (_list == null)
            return;
        _atStart = await _list.AtStart();
        StateHasChanged();
    }

    private async Task OnGotoStart()
    {
        if (_list == null)
            return;
        await _list.GotoStart();
    }

    private async Task SelectionModeChanged()
    {
        if (_list == null)
            return;
        await _list.RemoveAllSelections();

        StateHasChanged();
    }
    private async Task ClearSelections()
    {
        await _list.RemoveAllSelections();
        StateHasChanged();
    }

    async Task OnAddNewItem()
    {
        var count = _localListData.Count;
        _localListData.Insert(0, TestListRow.GetNewTestListRow(count));
        await _list.RowAdded(_localListData[0].ListItemId);
    }
    async Task OnAddNewItemGotoStartIfAtStart()
    {
        var atStart = await _list.AtStart();
        var count = _localListData.Count;
        _localListData.Add(TestListRow.GetNewTestListRow(count));
        await _list.Refresh();
        if (atStart)
            await _list.GotoStart();
    }

    void ChangeItem()
    {
        _localListData[0].FirstName = "Bla bla bla";
        _list.Refresh(_localListData[0]);
    }
}
