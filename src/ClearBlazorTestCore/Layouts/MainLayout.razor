@using ClearBlazor
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@namespace ClearBlazorTest
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@implements IHandleEvent

<RootComponent>
    <VirtualizeNew HorizontalAlignment=Alignment.Start Height=300 Width=300 CornerRadius=4 BoxShadow=4 Margin=10 Padding=10
                @ref="Virtualize" Context=item ItemsProvider=@GetItems PageSize=5>
        <StackPanel Orientation=Orientation.Landscape HorizontalAlignment=Alignment.Stretch Margin=10
                    BackgroundColor=Color.Transparent>
@*             <Avatar VerticalAlignment=Alignment.Center Color=Color.Transparent
                    Size=Size.VeryLarge Image=@($"https://picsum.photos/id/{item.ImageId}/200/200") />
 *@            <StackPanel Margin="0,0,0,20" Orientation=Orientation.Portrait HorizontalAlignment=Alignment.Stretch
                        BackgroundColor=Color.Transparent>
                <TextBlock Typo=Typo.H6 VerticalAlignment=Alignment.Center Color=@Color.Dark>
                    @($"{item.Title}")
                </TextBlock>
                <TextBlock VerticalAlignment=Alignment.Center Color=@Color.Dark>
                    @($"{item.Message}")
                </TextBlock>
            </StackPanel>
        </StackPanel>
    </VirtualizeNew>
</RootComponent>



@* <RootComponent>
    <Grid Rows="auto,*">
         <AppBar Row="0" Padding="10" BackgroundColor="Color.BackgroundGrey">
            <IconButton Dock="Dock.Left" Icon="@Icons.Material.Filled.Menu" OnClicked=@MenuClicked />
            <TextBlock Typo="Typo.H6" HorizontalAlignment="Alignment.Center"
                       VerticalAlignment="Alignment.Center">Clear Blazor</TextBlock>
        </AppBar>
        <Drawer @ref=Drawer Row=1 @bind-Open=Open DrawerLocation=DrawerLocation.Left DrawerMode="DrawerMode.Responsive">
            <DrawerContent>
                <Grid>
                    <ScrollViewer VerticalScrollMode="ScrollMode.Enabled">
                        <ListBox TListBox="string" Margin="0,10,0,10">
                            <ListBoxItem Text="Home" HRef="/" OnClicked=@Close />
                            <ListBoxItem Text="Components">
                                <ListBoxItem Text="Layout" InitiallyExpanded=false>
                                    <ListBoxItem Text="Grid" HRef="/Grid" OnClicked=@Close />
                                    <ListBoxItem Text="Stack Panel" HRef="/StackPanel" OnClicked=@Close />
                                    <ListBoxItem Text="Wrap Panel" HRef="/WrapPanel" OnClicked=@Close />
                                    <ListBoxItem Text="Dock Panel" HRef="/DockPanel" OnClicked=@Close />
                                    <ListBoxItem Text="Uniform Grid" HRef="/UniformGrid" OnClicked=@Close />
                                    <ListBoxItem Text="Tabs" HRef="/Tabs" OnClicked=@Close />
                                    <ListBoxItem Text="Drawer" HRef="/Drawer" OnClicked=@Close />
                                    <ListBoxItem Text="Drawing Canvas" HRef="/DrawingCanvas" OnClicked=@Close />
                                    <ListBoxItem Text="Card" HRef="/Card" OnClicked=@Close />
                                </ListBoxItem>
                                <ListBoxItem Text="Table" HRef="/Table" OnClicked=@Close />
                                <ListBoxItem Text="TextBlock" HRef="/TextBlock" OnClicked=@Close />
                                <ListBoxItem Text="Icons" HRef="/MaterialIcon" OnClicked=@Close />
                                <ListBoxItem Text="Avatars" HRef="/Avatar" OnClicked=@Close />
                                <ListBoxItem Text="AppBar" HRef="/AppBar" OnClicked=@Close />
                                <ListBoxItem Text="Images" HRef="/Image" OnClicked=@Close />
                                <ListBoxItem Text="Buttons" InitiallyExpanded=false>
                                    <ListBoxItem Text="Button" HRef="/Button" OnClicked=@Close />
                                    <ListBoxItem Text="Icon Button" HRef="/IconButton" OnClicked=@Close />
                                    <ListBoxItem Text="Toggle Icon Button" HRef="/ToggleIconButton" OnClicked=@Close />
                                    <ListBoxItem Text="Button Group" HRef="/ButtonGroup" OnClicked=@Close />
                                </ListBoxItem>
                                <ListBoxItem Text="Pickers" InitiallyExpanded=false>
                                    <ListBoxItem Text="Color Picker" HRef="/ColorPicker" OnClicked=@Close />
                                    <ListBoxItem Text="Date Picker" HRef="/DatePicker" OnClicked=@Close />
                                    <ListBoxItem Text="Time Picker" HRef="/TimePicker" OnClicked=@Close />
                                </ListBoxItem>
                                <ListBoxItem Text="ToolTip" HRef="/ToolTip" OnClicked=@Close />
                                <ListBoxItem Text="Toolbar" HRef="/Toolbar" OnClicked=@Close />
                                <ListBoxItem Text="ListBox" HRef="/ListBox" OnClicked=@Close />
                                <ListBoxItem Text="ListView" HRef="/ListView" OnClicked=@Close />
                                <ListBoxItem Text="Popup" HRef="/Popup" OnClicked=@Close />
                                <ListBoxItem Text="Inputs" InitiallyExpanded=false>
                                    <ListBoxItem Text="Check Box" HRef="/CheckBox" OnClicked=@Close />
                                    <ListBoxItem Text="Switch" HRef="/Switch" OnClicked=@Close />
                                    <ListBoxItem Text="Radio Button" HRef="/Radio" OnClicked=@Close />
                                    <ListBoxItem Text="Text Input" HRef="/TextInput" OnClicked=@Close />
                                    <ListBoxItem Text="Numeric Input" HRef="/NumericInput" OnClicked=@Close />
                                    <ListBoxItem Text="Select" HRef="/Select" OnClicked=@Close />
                                    <ListBoxItem Text="Slider" HRef="/Slider" OnClicked=@Close />
                                    <ListBoxItem Text="Color Picker" HRef="/ColorPickerInput" OnClicked=@Close />
                                    <ListBoxItem Text="Date Picker" HRef="/DatePickerInput" OnClicked=@Close />
                                    <ListBoxItem Text="Time Picker" HRef="/TimePickerInput" OnClicked=@Close />
                                </ListBoxItem>
                                <ListBoxItem Text="Forms" InitiallyExpanded=false>
                                    <ListBoxItem Text="Form" HRef="/Form" OnClicked=@Close />
                                    <ListBoxItem Text="Auto Form" HRef="/AutoForm" OnClicked=@Close />
                                </ListBoxItem>
                                <ListBoxItem Text="Virtualize" HRef="/Virtualize" OnClicked=@Close />
                                <ListBoxItem Text="Logs" HRef="/Logs" OnClicked=@Close />
                            </ListBoxItem>
                        </ListBox>
                    </ScrollViewer>
                </Grid>
            </DrawerContent>
            <DrawerBody>
                <Grid Margin="10">
                    <DockPanel>
                        <Grid Dock="Dock.Top" BorderThickness="0" HorizontalAlignment="Alignment.End">
                            <IconButton OnClicked=@OnClicked Icon=@GetIcon() ToolTip="Toggle Light/Dark Mode" Margin="0,10,0,0" />
                        </Grid>
                        <Grid>
                            @Body
                        </Grid>
                    </DockPanel>
                </Grid>
            </DrawerBody>
        </Drawer>
    </Grid>
 </RootComponent>
 *@
@code {
    Drawer Drawer;

    bool Open { get; set; } = false;

    private void Toggle()
    {
        Open = !Open;
    }

    private string GetIcon()
    {
        if (ThemeManager.IsDarkMode)
            return Icons.Material.Filled.LightMode;
        else
            return Icons.Material.Filled.DarkMode;
    }

    private void OnClicked()
    {
        ThemeManager.IsDarkMode = !ThemeManager.IsDarkMode;
    }

    private void Close()
    {
        if (Drawer.CurrentDrawerMode == DrawerMode.Temporary)
        {
            Open = false;
            StateHasChanged();
        }
    }

    private void MenuClicked()
    {
        Toggle();
        StateHasChanged();
    }

    private void GotoPage(string page)
    {
        NavManager.NavigateTo($"/{page}");
    }

    private void CheckedChanged()
    {
        StateHasChanged();
    }

    Task IHandleEvent.HandleEventAsync(
          EventCallbackWorkItem callback, object? arg) => callback.InvokeAsync(arg);

    public enum TestEnum
    {
        Enum1, Enum2, Enum3, Enum4
    }

    public TestEnum EnumValue { get; set; } = TestEnum.Enum2;


    List<string> StringValues = new() { "Potato", "Apricot" };
    List<double> DoubleValues = new() { 5.6, 4.0 };

    public List<string> Values { get; set; } = new() { "String2", "String3" };

    void Clicked()
    {
        StateHasChanged();
    }

    VirtualizeNew<Feed> Virtualize = null!;

    public struct Feed
    {
        public Feed(int imageId, string title, string message)
        {
            ImageId = imageId;
            Title = title;
            Message = message;

        }
        public int ImageId;
        public string Title;
        public string Message;

        public override string ToString()
        {
            return Title.Replace("Record", "");

        }
    }

    List<Feed> _feeds = new List<Feed>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        for (int i = 0; i < 50; i++)
        {
            _feeds.Add(new Feed((i + 1) % 1000, $"Record #{i}", "This is a message"));
        }
    }

    async Task<IEnumerable<Feed>> GetItems(ClearBlazor.ItemsProviderRequest request)
    {
        //await Task.Delay(1000); // Simulate async loading

        int num = request.EndIndex - request.StartIndex;
        if (request.StartIndex < _feeds.Count)
            if (request.StartIndex + num  < _feeds.Count)
                return _feeds.Skip(request.StartIndex).Take(num);
            else
                return _feeds.Skip(request.StartIndex).Take(_feeds.Count-request.StartIndex);
        return new List<Feed>();
    }
}