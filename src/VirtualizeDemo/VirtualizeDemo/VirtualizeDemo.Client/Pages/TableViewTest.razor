@page "/"
@namespace VirtualizeDemo
@using Microsoft.AspNetCore.SignalR.Client

<Grid Columns="800,auto" Rows="600,*">
    <TableView @ref=_table Height=500 VerticalAlignment=Alignment.Start BorderThickness=1
               HorizontalAlignment=Alignment.Start CornerRadius=4
               VirtualizeMode=VirtualizeMode.None
               ShowHeader=@_showHeader
               HoverHighlight=@_hoverHighlight
               SelectionMode=@_selectionMode 
               StickyHeader=@_stickyHeader
               AllowSelectionToggle=@_allowSelectionToggle
               VerticalGridLines=@_verticalGridLines
               HorizontalGridLines=@_horizontalGridLines
               RowSpacing=10 
               ColumnSpacing=20
               Items=@_localTableRows
               ColumnDefs="auto,auto,auto,auto,auto,auto,auto"
               @bind-SelectedItem=_selectedItem @bind-SelectedItems=_selectedItems>
        <TableColumn Label="Index" TItem=TableRow Field=@(x =>x.Index) />
        <TableColumn Label="First Name" TItem=TableRow Field=@(x =>x.FirstName) />
        <TableColumn Label="Last Name" TItem=TableRow Field=@(x =>x.LastName) />
        <TableColumn Label="Product" TItem=TableRow Field=@(x =>x.Product) />
        <TableColumn Label="Available" TItem=TableRow Field=@(x =>x.Available) />
        <TableColumn Label="Quantity" ContentAlignment=Alignment.Center TItem=TableRow Field=@(x =>x.Quantity) />
        <TableColumn Label="UnitPrice" ContentAlignment=Alignment.Stretch TItem=TableRow Field=@(x =>x.UnitPrice)>
            <DataTemplate Context=item>
                <TextBlock TextAlignment=Alignment.Center>$@(item.UnitPrice.ToString("0.00"))</TextBlock>
            </DataTemplate>
        </TableColumn>
        <TableColumn Label="Notes" TItem=TableRow Field=@(x =>x.NotesVariableHeight) />
    </TableView>
    <StackPanel Column=1>
        <RadioGroup Margin=10 Label="Selection mode" @bind-Value=_selectionMode
                    @bind-Value:after=@SelectionModeChanged>
            @foreach (SelectionMode mode in Enum.GetValues(typeof(SelectionMode)))
            {
                <Radio Label=@mode.ToString() Value="@mode" />
            }
        </RadioGroup>
        <CheckBox Margin=10 @bind-Checked=_allowSelectionToggle Label="Allow selection toggle (single selection only)" />
        <CheckBox Margin=10 @bind-Checked=_hoverHighlight Label="Highlight on hover" />
        <CheckBox Margin=10 @bind-Checked=_showHeader Label="Show header" />
        <CheckBox Margin=10 @bind-Checked=_stickyHeader Label="Sticky header" />
        <TextBlock Margin=10>Selection=@(_selectedItem?.FirstName + "" + _selectedItem?.LastName)</TextBlock>

        <TextBlock Margin=10>Selections=@string.Join(",", _selectedItems.Select(s => s.FirstName + "" + s.LastName))</TextBlock>
        <Button Margin=10 Width =150 HorizontalAlignment=Alignment.Start OnClicked=@ClearSelections>Clear selections</Button>
    </StackPanel>
    <WrapPanel Row=1 ColumnSpan=3 ColumnSpacing=10 RowSpacing=10 Direction=Direction.Row>
        <Button OnClicked=@(e => GotoIndex(20, Alignment.Start))> Goto 20(start)</Button>
        <Button OnClicked=@(e => GotoIndex(50, Alignment.Center))>Goto 50 (center)</Button>
        <Button OnClicked=@(e => GotoIndex(70, Alignment.End))>Goto 70 (end)</Button>
        <Button OnClicked=@OnAddNewItem>Add new item</Button>
        <Button OnClicked=@OnGotoEnd>Goto end</Button>
        <Button OnClicked=@OnGotoStart>Goto start</Button>
        <Button OnClicked=@OnAddNewItemGotoEndIfAtEnd>Add new item and goto end if at end</Button>
        <StackPanel Orientation=Orientation.Landscape>
            <Button OnClicked=@CheckAtEnd>CheckAtEnd</Button>
            <TextBlock VerticalAlignment=Alignment.Center>@_atEnd</TextBlock>
        </StackPanel>
        <StackPanel Orientation=Orientation.Landscape>
            <Button OnClicked=@CheckAtStart>CheckAtStart</Button>
            <TextBlock VerticalAlignment=Alignment.Center >@_atStart</TextBlock>
        </StackPanel>
    </WrapPanel>

</Grid>
