<Grid Columns="*,*,*">
    <RadioGroup Orientation=Orientation.Portrait Column="0" Label="Popup Position" @bind-Value=Position>
        @foreach (PopupPosition item in Enum.GetValues(typeof(PopupPosition)))
        {
            <Radio Label=@item.ToString() Value="@item" />
        }
    </RadioGroup>
    <Border Column=1 Width="100" Height="100" BorderThickness="1" HorizontalAlignment=Alignment.Start>
        <Popup Position=@Position Transform=@Transform @bind-Open=@Open AllowHorizontalFlip="false" AllowVerticalFlip="false">
            <Grid BorderThickness="1" CornerRadius="4" BackgroundColour=Color.BackgroundGrey >
                <TextBlock HorizontalAlignment=Alignment.Center VerticalAlignment=Alignment.Center
                           Margin ="30">Popup content</TextBlock>
                <MaterialIcon HorizontalAlignment=@GetHorizontalAlignment() 
                              VerticalAlignment=@GetVerticalAlignment()
                              Icon=@GetIcon() Colour=Color.Secondary />
            </Grid>
        </Popup>
    </Border>
    <RadioGroup Orientation=Orientation.Portrait Column="2" Label="Popup Transform" @bind-Value=Transform>
        @foreach (PopupTransform item in Enum.GetValues(typeof(PopupTransform)))
        {
            <Radio Label=@item.ToString() Value="@item" />
        }
    </RadioGroup>
</Grid>
@code {
    private PopupPosition _popupPosition = PopupPosition.BottomCentre;
    private PopupTransform _popupTransform = PopupTransform.BottomCentre;
    public PopupPosition Position
    {
        get => _popupPosition;
        set
        {
            _popupPosition = value;
            Open = true;
        }
    }
    public PopupTransform Transform
    {
        get => _popupTransform;
        set
        {
            _popupTransform = value;
            Open = true;
        }
    }

    private bool Open = false;
    public string GetIcon()
    {
        string icon = "";

        switch (Transform)
        {
            case PopupTransform.TopLeft:
                icon = Icons.Material.Filled.SouthEast;
                break;
            case PopupTransform.TopCentre:
                icon = Icons.Material.Filled.South;
                break;
            case PopupTransform.TopRight:
                icon = Icons.Material.Filled.SouthWest;
                break;
            case PopupTransform.CentreLeft:
                icon = Icons.Material.Filled.East;
                break;
            case PopupTransform.CentreCentre:
                icon = Icons.Material.Filled.ZoomOutMap;
                break;
            case PopupTransform.CentreRight:
                icon = Icons.Material.Filled.West;
                break;
            case PopupTransform.BottomLeft:
                icon = Icons.Material.Filled.NorthEast;
                break;
            case PopupTransform.BottomCentre:
                icon = Icons.Material.Filled.North;
                break;
            case PopupTransform.BottomRight:
                icon = Icons.Material.Filled.NorthWest;
                break;
        }
        return icon;
    }
    public Alignment GetHorizontalAlignment()
    {
        Alignment alignment = Alignment.Start;

        switch (Transform)
        {
            case PopupTransform.TopLeft:
            case PopupTransform.CentreLeft:
            case PopupTransform.BottomLeft:
                break;
            case PopupTransform.TopCentre:
            case PopupTransform.CentreCentre:
            case PopupTransform.BottomCentre:
                alignment = Alignment.Center;
                break;
            case PopupTransform.TopRight:
            case PopupTransform.CentreRight:
            case PopupTransform.BottomRight:
                alignment = Alignment.End;
                break;
        }
        return alignment;
    }
    public Alignment GetVerticalAlignment()
    {
        Alignment alignment = Alignment.Start;

        switch (Transform)
        {
            case PopupTransform.TopLeft:
            case PopupTransform.TopCentre:
            case PopupTransform.TopRight:
                alignment = Alignment.Start;
                break;
            case PopupTransform.CentreLeft:
            case PopupTransform.CentreCentre:
            case PopupTransform.CentreRight:
                alignment = Alignment.Center;
                break;
            case PopupTransform.BottomLeft:
            case PopupTransform.BottomCentre:
            case PopupTransform.BottomRight:
                alignment = Alignment.End;
                break;
        }
        return alignment;
    }
}
