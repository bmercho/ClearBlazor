@using System.ComponentModel.DataAnnotations

<StackPanel Orientation=Orientation.Portrait Spacing="10" Margin="10">
    <Form @ref="form" ValidationErrorLocation=ValidationErrorLocation.ErrorIcon  Model=@this >
        <StackPanel Orientation=Orientation.Portrait Spacing="25" Margin=20>
            <TextInput TextEditFillMode=TextEditFillMode.Underline Label="Name" @bind-Value="TextValue" FieldName="TextValue" Immediate="true" />
            <NumericInput TextEditFillMode=TextEditFillMode.Underline Label="Value" @bind-Value="IntValue" FieldName="IntValue" Immediate="true" />
            <CheckBox Label="I agree" @bind-Checked=BoolValue FieldName="BoolValue" />
             <Switch Label="I agree" @bind-Checked=SwitchValue FieldName="SwitchValue" />
            <RadioGroup Label="Radio Group" @bind-Value=RadioValue FieldName="RadioValue">
                <Radio Label="Item1" Value=@("Item1") />
                <Radio Label="Item2" Value=@("Item2") />
                <Radio Label="Item3" Value=@("Item3") />
                <Radio Label="Item4" Value=@("Item4") />
            </RadioGroup>
           <Select TextEditFillMode=TextEditFillMode.Underline Label="Select" @bind-Value=EnumValue FieldName="EnumValue">
                <SelectItem Value=TestEnum.Enum1 Text="Item1" Icon=@Icons.Material.Filled.HeartBroken/>
                <SelectItem Value=TestEnum.Enum2 Text="Item2" Icon=@Icons.Material.Filled.HeartBroken />
                <SelectItem Value=TestEnum.Enum3 Text="Item3" Icon=@Icons.Material.Filled.HeartBroken />
                <SelectItem Value=TestEnum.Enum4 Text="Item4" Icon=@Icons.Material.Filled.HeartBroken />
            </Select>

            <Select TextEditFillMode=TextEditFillMode.Underline Label="MultiSelect-flags enum" @bind-Value=Days MultiSelect=true FieldName="Days">
                @foreach (DaysOfWeek item in Enum.GetValues(typeof(DaysOfWeek)))
                {
                    <SelectItem Text=@item.ToString() Value="@item" />
                }
            </Select>

            <Slider Label="Simple slider" @bind-Value=SliderValue FieldName="SliderValue" />
          
            <ColourPickerInput @bind-Value=ColourValue FieldName="ColourValue" />
            <DatePickerInput @bind-Value=DateValue FieldName="DateValue" />
            <TimePickerInput @bind-Value=TimeValue FieldName="TimeValue" />

        </StackPanel>
    </Form>
    <Button HorizontalAlignment=Alignment.Start OnClicked=@(() => form.Validate())>Validate</Button>
    <Button HorizontalAlignment=Alignment.Start OnClicked=@Save>Save</Button>
</StackPanel>

@code {
    public enum TestEnum
    {
        Enum1, Enum2, Enum3, Enum4
    }
    [Flags]
    enum DaysOfWeek
    {
        Monday = 1, Tuesday = 2, Wednesday = 4, Thursday = 8, Friday = 16, Saturday = 32, Sunday = 64
    }

    DaysOfWeek Days = DaysOfWeek.Wednesday | DaysOfWeek.Friday;

    [Required(ErrorMessage = "A value is required.")]
    [MaxLength(10, ErrorMessage = "The maximum length is 10.")]
    public string TextValue { get; set; } = string.Empty;

    public int IntValue { get; set; }
    public bool BoolValue { get; set; } = true;
    public bool SwitchValue { get; set; } = true;
    [Required(ErrorMessage = "A selection is required.")]
    public string? RadioValue { get; set; } = null;
    public TestEnum EnumValue { get; set; } = TestEnum.Enum2;
    public double SliderValue { get; set; } = 50;
    public Color? ColourValue { get; set; } = Color.Secondary;
    public DateOnly? DateValue { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    public TimeOnly? TimeValue { get; set; } = new TimeOnly(22,15);

    Form form;


    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }
    private async Task Save()
    {
        bool valid = await form.Validate();
        if (valid)
        {
            // Do Save
        }
    }

}