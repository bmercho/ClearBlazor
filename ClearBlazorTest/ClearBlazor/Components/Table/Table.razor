@namespace ClearBlazor
@inherits ClearComponentBase
@typeparam TItem

<CascadingValue Value="this" IsFixed="false">
    <div id="@Id" style="@ComputeStyle()" class="@Classes">
        <Grid Columns=@ColumnDefs ColumnSpacing=@ColumnSpacing RowSpacing=@RowSpacing>
            @for(int col=0;col<Columns.Count;col++)
            {
                var colIndex = col;
                <div style=@GetHeaderStyle(colIndex+1)>
                    @if (@Columns[colIndex] == null || @Columns[colIndex].HeaderTemplate == null)
                    {
                        <TextBlock FontWeight=@((int)FontWeight.Bold)>@Columns[colIndex].Label</TextBlock>
                    }
                    else
                    {
                        @Columns[colIndex].HeaderTemplate(@Columns[colIndex].Label);
                    }
                </div>
            }
            @if(HorizontalGridLines == GridLines.HeaderOnly || 
                HorizontalGridLines == GridLines.All)
            {
                <div style=@GetHorizontalGridLineStyle(2, Columns.Count)/>
            }
            @for(int row = 0;row < Items.Count;row++)
            {
                var rowIndex = row;
                @for (int col=0;col<Columns.Count;col++)
                {
                    var colIndex = col;
                    <div style=@GetRowStyle(rowIndex+2, colIndex+1)>
                        @if (@Columns[colIndex] == null || @Columns[colIndex].RowTemplate == null)
                        {
                            <TextBlock>
                                @foreach (var line in GetLines(Columns[colIndex].Field.Invoke(Items[rowIndex]).ToString()))
                                {
                                    @(line)
                                    <br />
                                }
                            </TextBlock>
                        }
                        else
                        {
                            @Columns[colIndex].RowTemplate(@Items[rowIndex]);
                        }
                    </div>
                }
                @if (HorizontalGridLines == GridLines.All && rowIndex + 1 < Items.Count)
                {
                    <div style=@GetHorizontalGridLineStyle(rowIndex+3, Columns.Count)/>
                }
            }
            @if(VerticalGridLines == GridLines.HeaderOnly || 
                VerticalGridLines == GridLines.All)
            {
                @for (int col=0;col<Columns.Count-1;col++)
                {
                    var colIndex = col;
                    @if (VerticalGridLines == GridLines.HeaderOnly) 
                    {
                        <div style=@GetVerticalGridLineStyle(colIndex+2, 1)/>
                    }
                    else
                    {
                        <div style=@GetVerticalGridLineStyle(colIndex+2, Items.Count+1)/>
                    }
                }
            }
        </Grid>
    </div>
    @ChildContent
</CascadingValue>


