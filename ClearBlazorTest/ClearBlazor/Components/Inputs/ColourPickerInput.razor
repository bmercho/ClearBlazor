@namespace ClearBlazor
@inherits ContainerInputBase<Color>

<CascadingValue Value="this" IsFixed="false">
    <div id=@Id class=@Classes style=@ComputeStyle() @onmouseenter=OnMouseEnter @onmouseleave=OnMouseLeave>
        <StackPanel Orientation="Orientation.Portrait">
            @if (!string.IsNullOrEmpty(Label))
            {
                <div style=@GetLabelStyle()>@Label</div>
            }
            <Grid BackgroundColour=@GetBackgroundColour() BorderThickness=@GetBorderThickness()
                  BorderColour=@GetBorderColour() CornerRadius=@GetCornerRadius() Columns="*,auto,auto">
                <div @ref="PickerElement" style="display:grid; ">
                    <Grid MinWidth=200 Columns="*,auto" OnClicked=@TogglePopup>
                        <Border BackgroundColour=@Value />
                        @if(ShowHex)
                        {
                            <TextBlock Style="@ComputeInputStyle()" Colour=@Color.ContrastingColor(Value) 
                                       VerticalAlignment=Alignment.Center>@Value?.Value</TextBlock>
                        }
                        <IconButton Size=Size.Small Colour=Color.Dark Column=1 Icon=@Icons.Material.Outlined.Palette />
                    </Grid>
                     <Popup CloseOnOutsideClick=@IsMouseNotOver() Margin="-20,1,-20,-20"
                           Position=Position Transform=Transform
                           AllowVerticalFlip=AllowVerticalFlip AllowHorizontalFlip=AllowHorizontalFlip
                           
                           @bind-Open=PopupOpen>
                           <Border Margin=20,0,20,20 BoxShadow=2>
                               <ColourPicker @bind-Colour=Value @bind-Colour:after=OnColourChanged />
                           </Border>
                    </Popup>
                     @if (ValidationErrorLocation == ValidationErrorLocation.ErrorIcon && !IsValid)
                    {
                        <MaterialIcon Name="MaterialIcon in TextInputBase" Column=2 Icon="@Icons.Material.Filled.FmdBad"
                                      Size=@Size ToolTip=@ValidationMessage Colour=@Color.Error />
                    }
                </div>
            </Grid>
            @if (ValidationErrorLocation == ValidationErrorLocation.Inline && !IsValid)
            {
                <TextBlock TextWrapping="TextWrap.WrapOnNewLines"
                           Colour=@Color.Error>@ValidationMessage</TextBlock>
            }
        </StackPanel>
    </div>
</CascadingValue>

